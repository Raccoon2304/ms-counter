spring:
  application:
    name: ms-counter

  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      auto-offset-reset: latest
      enable-auto-commit: true
      group-id: my-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      #Частота отправки heartbeat-сигналов брокеру (мс).
      heartbeat-interval-ms: '3000'
      #Максимальное время между вызовами poll() до исключения из группы (мс).
      max.poll.interval.ms: '300000'
      #Максимальный объём данных, который сервер должен вернуть в ответ на запрос выборки | max.partition.fetch.bytes
      fetch.max.bytes: 52428800
      #Тайм-аут, используемый для обнаружения сбоев клиента при использовании механизма управления группами Kafka.
      #Клиент периодически отправляет брокеру сигналы работоспособности, чтобы подтвердить свою работоспособность.
      #Если брокер не получает сигналы работоспособности до истечения этого тайм-аута сеанса, брокер удаляет клиента из
      #группы и инициирует перебалансировку
      session.timeout.ms: '45000'
      #Конфигурация определяет максимальное время ожидания клиентом ответа на запрос. Если ответ не получен до истечения
      #времени ожидания, клиент при необходимости повторно отправит запрос или отменит его, если количество попыток исчерпано
      request.timeout.ms: '30000'
      #Паралеллизм Назначает разделы потребителям по принципу циклического распределения
      partition.assignment.strategy: org.apache.kafka.clients.consumer.RoundRobinAssignor
      properties:
        spring.json.trusted.packages: "*"

  datasource:
    url: jdbc:postgresql://localhost:5432/counter
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver

  liquibase:
    enabled: false
    change-log: classpath:db.changelog-master.xml

server.port: 8081

app:
  kafka:
    topic:
      wordCounterRequest: word-counter.request